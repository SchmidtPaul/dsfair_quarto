{
  "hash": "5ed42924b7683133b9d292c0aa293b19",
  "result": {
    "markdown": "---\ntitle: \"One-way augmented design\"\nabstract: \"One-way ANOVA & pairwise comparison post hoc tests in a non-resolvable augmented design.\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (install &) load packages\npacman::p_load(\n  conflicted,\n  desplot,\n  emmeans,\n  ggtext,\n  lme4,\n  lmerTest,\n  multcomp,\n  multcompView,\n  tidyverse)\n\n# handle function conflicts\nconflicts_prefer(dplyr::filter) \nconflicts_prefer(dplyr::select)\nconflicts_prefer(lmerTest::lmer)\n```\n:::\n\n\n\n# Data\n\nThis example is taken from Chapter *\"3.7 Analysis of a non-resolvable augmented design\"* of the course material \"Mixed models for metric data (3402-451)\" by [Prof. Dr. Hans-Peter Piepho](https://www.uni-hohenheim.de/organisation?tx_base_lsfcontentadmin%5BlsfPerson%5D=6257). It considers data published in @petersen_1994 from a yield trial laid out as an augmented design. The genotypes (`gen`) include 3 standards (`st`, `ci`, `wa`) and 30 new cultivars of interest. The trial was laid out in 6 blocks (`block`). The 3 standards are tested in each block, while each entry is tested in only one of the blocks. Therefore, the blocks are *\"incomplete blocks\"*.\n\n## Import\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# data is available online:\npath <- \"https://raw.githubusercontent.com/SchmidtPaul/dsfair_quarto/master/data/Petersen1994.csv\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(path) # use path from above\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 48 x 5\n   gen   yield block   row   col\n   <chr> <dbl> <chr> <dbl> <dbl>\n 1 st     2972 I         1     1\n 2 14     2405 I         2     1\n 3 26     2855 I         3     1\n 4 ci     2592 I         4     1\n 5 17     2572 I         5     1\n 6 wa     2608 I         6     1\n 7 22     2705 I         7     1\n 8 13     2391 I         8     1\n 9 st     3122 II        1     2\n10 ci     3023 II        2     2\n# i 38 more rows\n```\n:::\n:::\n\n\n\n## Format\n\nBefore anything, the columns `gen` and `block` should be encoded as factors, since R by default encoded them as character.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dat %>%\n  mutate(across(c(gen, block), ~ as.factor(.x)))\n```\n:::\n\n\n\n## Explore\n\nWe make use of [`dlookr::describe()`](../../misc/usefulthings.qmd#dlookr) to conveniently obtain descriptive summary tables. Here, we get can summarize per block and per cultivar.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(gen) %>% \n  dlookr::describe(yield) %>% \n  select(2:sd) %>%\n  arrange(desc(n), desc(mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 33 x 5\n   gen       n    na  mean    sd\n   <fct> <int> <int> <dbl> <dbl>\n 1 st        6     0 2759.  832.\n 2 ci        6     0 2726.  711.\n 3 wa        6     0 2678.  615.\n 4 19        1     0 3643    NA \n 5 11        1     0 3380    NA \n 6 07        1     0 3265    NA \n 7 03        1     0 3055    NA \n 8 04        1     0 3018    NA \n 9 01        1     0 3013    NA \n10 30        1     0 2955    NA \n# i 23 more rows\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(block) %>% \n  dlookr::describe(yield) %>% \n  select(2:sd) %>%\n  arrange(desc(mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 6 x 5\n  block     n    na  mean    sd\n  <fct> <int> <int> <dbl> <dbl>\n1 VI        8     0 3205.  417.\n2 II        8     0 2864.  258.\n3 IV        8     0 2797.  445.\n4 I         8     0 2638.  202.\n5 III       8     0 2567.  440.\n6 V         8     0 1390.  207.\n```\n:::\n:::\n\n\n:::\n:::\n\nAdditionally, we can decide to plot our data. Note that we here define custom colors for the genotypes, where all unreplicated entries get a shade of green and all replicated checks get a shade of red.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreens30 <- colorRampPalette(c(\"#bce2cc\", \"#00923f\"))(30)\noranges3 <- colorRampPalette(c(\"#e4572e\", \"#ad0000\"))(3)\ngen_cols <- set_names(c(greens30, oranges3), nm = levels(dat$gen))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = dat) +\n  aes(\n    y = yield,\n    x = gen,\n    shape = block\n  ) +\n  geom_point() +\n    scale_x_discrete(\n    name = \"Genotype\"\n  ) +\n  scale_y_continuous(\n    name = \"Yield\",\n    limits = c(0, NA),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_color_manual(\n    guide = \"none\",\n    values = gen_cols\n  ) +\n  scale_shape_discrete(\n    name = \"Block\"\n  ) +\n  guides(shape = guide_legend(nrow = 1)) +\n  theme_bw() +\n  theme(\n    legend.position = \"top\",\n    axis.text.x = element_text(size = 9)\n  )\n```\n\n::: {.cell-output-display}\n![](augm_petersen1994_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nFinally, since this is an experiment that was laid with a certain experimental design (= a non-resolvable augmented design) - it makes sense to also get a field plan. This can be done via `desplot()` from [{desplot}](../../misc/usefulthings.qmd#desplot).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndesplot(\n  data = dat,\n  flip = TRUE, # row 1 on top, not on bottom\n  form = gen ~ col + row, # fill color per cultivar  \n  col.regions = gen_cols, # custom fill colors\n  out1 = block, # line between blocks                     \n  text = gen, # cultivar names per plot\n  cex = 1, # cultviar names: font size\n  shorten = FALSE, # cultivar names: don't abbreviate\n  main = \"Field layout\", # plot title\n  show.key = FALSE # hide legend\n) \n```\n\n::: {.cell-output-display}\n![](augm_petersen1994_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Model\n\nFinally, we can decide to fit a linear model with `yield` as the response variable and `gen` as fixed effects, since our goal is to compare them to each other. Since the trial was laid out in blocks, we also need `block` effects in the model, but these can be taken either as a fixed or as random effects. Since our goal is to compare genotypes, we will determine which of the two models we prefer by comparing the average standard error of a difference (s.e.d.) for the comparisons between adjusted genotype means - the lower the s.e.d. the better. \n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# blocks as fixed (linear model)\nmod.fb <- lm(yield ~ gen + block,\n             data = dat)\n\nmod.fb %>%\n  emmeans(pairwise ~ \"gen\",\n          adjust = \"tukey\") %>%\n  pluck(\"contrasts\") %>% # extract diffs\n  as_tibble() %>% # format to table\n  pull(\"SE\") %>% # extract s.e.d. column\n  mean() # get arithmetic mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 461.3938\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# blocks as random (linear mixed model)\nmod.rb <- lmer(yield ~ gen + (1 | block),\n               data = dat)\n\nmod.rb %>%\n  emmeans(pairwise ~ \"gen\",\n          adjust = \"tukey\",\n          lmer.df = \"kenward-roger\") %>%\n  pluck(\"contrasts\") %>% # extract diffs\n  as_tibble() %>% # format to table\n  pull(\"SE\") %>% # extract s.e.d. column\n  mean() # get arithmetic mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 462.0431\n```\n:::\n:::\n\n\n:::\n:::\n\nAs a result, we find that the model with fixed block effects has the slightly smaller s.e.d. and is therefore more precise in terms of comparing genotypes.\n\n::: {.callout-warning collapse=\"true\"}\n## Model assumptions met? (click to show)\n\nIt would be at this moment (i.e. after fitting the model and before running the ANOVA), that you should check whether the model assumptions are met. Find out more in the [summary article \"Model Diagnostics\"](../../summaryarticles/modeldiagnostics.qmd)\n:::\n\n# ANOVA\n\nBased on our model, we can then conduct an ANOVA:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nANOVA <- anova(mod.fb)\nANOVA\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nAnalysis of Variance Table\n\nResponse: yield\n          Df   Sum Sq Mean Sq F value    Pr(>F)    \ngen       32 12626173  394568   4.331 0.0091056 ** \nblock      5  6968486 1393697  15.298 0.0002082 ***\nResiduals 10   911027   91103                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\nAccordingly, the ANOVA's F-test found the cultivar effects to be statistically different (p = 0.009\\*\\*). Additionally, the block effects are also statistically significant (p < .001\\*\\*\\*), but this is only of secondary concern for us.\n\n# Mean comparison\n\nBesides an ANOVA, one may also want to compare adjusted yield means between cultivars via post hoc tests (t-test, Tukey test etc.).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_comp <- mod.fb %>% \n  emmeans(specs = ~ gen) %>% # adj. mean per genotype\n  cld(adjust = \"Tukey\", Letters = letters) # compact letter display (CLD)\n\nmean_comp\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n gen emmean  SE df lower.CL upper.CL .group\n 12    1632 341 10      164     3100  a    \n 06    1823 341 10      355     3291  a    \n 28    1862 341 10      394     3330  a    \n 09    1943 341 10      475     3411  a    \n 05    2024 341 10      556     3492  a    \n 29    2162 341 10      694     3630  a    \n 01    2260 341 10      792     3728  a    \n 15    2324 341 10      856     3792  a    \n 02    2330 341 10      862     3798  a    \n 20    2345 341 10      877     3813  a    \n 13    2388 341 10      920     3856  a    \n 14    2402 341 10      934     3870  a    \n 23    2445 341 10      977     3913  a    \n 07    2512 341 10     1044     3980  a    \n 08    2528 341 10     1060     3996  a    \n 18    2562 341 10     1094     4030  a    \n 10    2568 341 10     1100     4036  a    \n 17    2569 341 10     1101     4037  a    \n 24    2630 341 10     1162     4098  a    \n wa    2678 123 10     2148     3208  a    \n 22    2702 341 10     1234     4170  a    \n ci    2726 123 10     2195     3256  a    \n st    2759 123 10     2229     3289  a    \n 16    2770 341 10     1302     4238  a    \n 25    2784 341 10     1316     4252  a    \n 30    2802 341 10     1334     4270  a    \n 27    2816 341 10     1348     4284  a    \n 26    2852 341 10     1384     4320  a    \n 04    2865 341 10     1397     4333  a    \n 19    2890 341 10     1422     4358  a    \n 03    2902 341 10     1434     4370  a    \n 21    2963 341 10     1495     4431  a    \n 11    3055 341 10     1587     4523  a    \n\nResults are averaged over the levels of: block \nConfidence level used: 0.95 \nConf-level adjustment: sidak method for 33 estimates \nP value adjustment: tukey method for comparing a family of 33 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n```\n:::\n:::\n\n\n\nIt can be seen that while some genotypes have a higher yield than others, no differences are found to be statistically significant here. Accordingly, notice that *e.g.* for `gen 11`, which is the genotype with the highest adjusted yield mean (=3055), its lower confidence limit (=1587) includes `gen 12`, which is the genotype with the lowest adjusted yield mean (=1632). \n\nNote that if you would like to see the underlying individual contrasts/differences between adjusted means, simply add `details = TRUE` to the `cld()` statement. Furthermore, check out the [Summary Article \"Compact Letter Display\"](../../summaryarticles/compactletterdisplay.qmd).\n\nFinally, we can create a plot that displays both the raw data and the results, *i.e.* the comparisons of the adjusted means that are based on the linear model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# reorder genotype factor levels according to adjusted mean\nmy_caption <- \"Dots represent raw data. Red diamonds and error bars represent adjusted means with 95% confidence limits per cultivar. Means followed by a common letter are not significantly different according to the Tukey-test.\"\n\nggplot() +\n  # green/red dots representing the raw data\n  geom_point(\n    data = dat,\n    aes(y = yield, x = gen, color = gen)\n  ) +\n  # red diamonds representing the adjusted means\n  geom_point(\n    data = mean_comp,\n    aes(y = emmean, x = gen),\n    shape = 18,\n    color = \"red\",\n    position = position_nudge(x = 0.2)\n  ) +\n  # red error bars representing the confidence limits of the adjusted means\n  geom_errorbar(\n    data = mean_comp,\n    aes(ymin = lower.CL, ymax = upper.CL, x = gen),\n    color = \"red\",\n    width = 0.1,\n    position = position_nudge(x = 0.2)\n  ) +\n  # red letters \n  geom_text(\n    data = mean_comp,\n    aes(y = upper.CL, x = gen, label = str_trim(.group)),\n    color = \"red\",\n    vjust = -0.2,\n    position = position_nudge(x = 0.2)\n  ) + \n  scale_color_manual(\n    guide = \"none\", \n    values = gen_cols\n  ) + \n  scale_x_discrete(\n    name = \"Cultivar\",\n    limits = as.character(mean_comp$gen)\n  ) +\n  scale_y_continuous(\n    name = \"Yield\",\n    limits = c(0, NA),\n    expand = expansion(mult = c(0, 0.1))\n  ) +\n  labs(caption = my_caption) +\n  theme_classic() +\n  theme(plot.caption = element_textbox_simple(margin = margin(t = 5)),\n        plot.caption.position = \"plot\", \n        axis.text.x = element_text(size = 9))\n```\n\n::: {.cell-output-display}\n![](augm_petersen1994_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "augm_petersen1994_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\r\n\\usepackage{longtable}\r\n\\usepackage{array}\r\n\\usepackage{multirow}\r\n\\usepackage{wrapfig}\r\n\\usepackage{float}\r\n\\usepackage{colortbl}\r\n\\usepackage{pdflscape}\r\n\\usepackage{tabu}\r\n\\usepackage{threeparttable}\r\n\\usepackage{threeparttablex}\r\n\\usepackage[normalem]{ulem}\r\n\\usepackage{makecell}\r\n\\usepackage{xcolor}\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}