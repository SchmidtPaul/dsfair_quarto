{
  "hash": "be6fec49c8f85b85315c2bf7372d72da",
  "result": {
    "markdown": "---\ntitle: \"One-way row column design\"\nabstract: \"One-way ANOVA & pairwise comparison post hoc tests in a resolvable row column design.\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (install &) load packages\npacman::p_load(\n  conflicted,\n  desplot,\n  emmeans,\n  ggtext,\n  lme4,\n  lmerTest,\n  multcomp,\n  multcompView,\n  tidyverse)\n\n# handle function conflicts\nconflicts_prefer(dplyr::filter) \nconflicts_prefer(dplyr::select)\nconflicts_prefer(lmerTest::lmer)\n```\n:::\n\n\n\n# Data\n\nThis example is taken from Chapter *\"3.10 Analysis of a resolvable row-column design\"* of the course material \"Mixed models for metric data (3402-451)\" by [Prof. Dr. Hans-Peter Piepho](https://www.uni-hohenheim.de/organisation?tx_base_lsfcontentadmin%5BlsfPerson%5D=6257). It considers data published in @kemptonfox_1996 from a yield trial laid out as a resolvable row-column design. The trial had 35 genotypes (`gen`), 2 complete replicates (`rep`) with 5 rows (`row`) and 7 columns (`col`). Thus, a complete replicate is subdivided into incomplete rows and columns.\n\n## Import\n\nThe data is available as part of the {agridat} package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- as_tibble(agridat::kempton.rowcol)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 68 x 5\n   rep     row   col gen   yield\n   <fct> <int> <int> <fct> <dbl>\n 1 R1        1     1 G20    3.77\n 2 R1        1     2 G04    3.21\n 3 R1        1     3 G33    4.55\n 4 R1        1     4 G28    4.09\n 5 R1        1     5 G07    5.05\n 6 R1        1     6 G12    4.19\n 7 R1        1     7 G30    3.27\n 8 R1        2     1 G10    3.44\n 9 R1        2     2 G14    4.3 \n10 R1        2     4 G21    3.86\n# i 58 more rows\n```\n:::\n:::\n\n\n\n## Format\n\nFor our analysis, `gen`, `row` and `col` should be encoded as factors. However, the `desplot()` function needs `row` and `col` as formatted as integers. Therefore we create copies of these columns encoded as factors and named `rowF` and `colF`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dat %>%\n  mutate(\n    colF = as.factor(col),\n    rowF = as.factor(row)\n  )\n```\n:::\n\n\n\n## Explore\n\nWe make use of [`dlookr::describe()`](../../misc/usefulthings.qmd#dlookr) to conveniently obtain descriptive summary tables. Here, we get can summarize per block and per cultivar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(gen) %>% \n  dlookr::describe(yield) %>% \n  select(2:sd) %>%\n  arrange(desc(mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 35 x 5\n   gen       n    na  mean     sd\n   <fct> <int> <int> <dbl>  <dbl>\n 1 G19       2     0  6.07 1.84  \n 2 G07       2     0  5.74 0.976 \n 3 G33       2     0  5.13 0.820 \n 4 G06       2     0  4.96 0.940 \n 5 G09       2     0  4.94 1.68  \n 6 G11       2     0  4.93 1.03  \n 7 G14       2     0  4.92 0.877 \n 8 G27       2     0  4.89 1.80  \n 9 G03       2     0  4.78 0.0424\n10 G25       2     0  4.78 0.361 \n# i 25 more rows\n```\n:::\n:::\n\n\n\nAdditionally, we can decide to plot our data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# sort genotypes by mean yield\ngen_order <- dat %>% \n  group_by(gen) %>% \n  summarise(mean = mean(yield, na.rm = TRUE)) %>% \n  arrange(mean) %>% \n  pull(gen) %>% \n  as.character()\n\nggplot(data = dat) +\n  aes(\n    y = yield,\n    x = gen,\n    shape = rep\n  ) +\n  geom_line(\n    aes(group = gen),\n    color = \"darkgrey\"\n  ) +\n  geom_point() +\n  scale_x_discrete(\n    name = \"Genotype\",\n    limits = gen_order\n  ) +\n  scale_y_continuous(\n    name = \"Yield\",\n    limits = c(0, NA),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_shape_discrete(\n    name = \"Replicate\"\n  ) +\n  guides(shape = guide_legend(nrow = 1)) +\n  theme_classic() +\n  theme(\n    legend.position = \"top\", \n    axis.text.x = element_text(angle = 90, vjust = 0.5)\n  )\n```\n\n::: {.cell-output-display}\n![](rowcol_kemptonfox1997_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nFinally, since this is an experiment that was laid with a certain experimental design (= a resolvable row column design) - it makes sense to also get a field plan. This can be done via `desplot()` from [{desplot}](../../misc/usefulthings.qmd#desplot). In this case it is worth noting that there is missing data, as yield values for two plots are not present in the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndesplot(\n  data = dat,\n  form = gen ~ col + row | rep, # fill color per genotype, headers per replicate\n  text = gen, \n  cex = 0.7, \n  shorten = \"no\",\n  out1 = row, out1.gpar=list(col=\"black\"), # lines between rows\n  out2 = col, out2.gpar=list(col=\"black\"), # lines between columns\n  main = \"Field layout\", \n  show.key = FALSE\n)     \n```\n\n::: {.cell-output-display}\n![](rowcol_kemptonfox1997_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Model\n\nFinally, we can decide to fit a linear model with `yield` as the response variable and `gen` as fixed effects, since our goal is to compare them to each other. Since the trial was laid out in rows and columns, we also need `rowF` and `colF` effects in the model, but these can be taken either as a fixed or as random effects. Since our goal is to compare genotypes, we will determine which of the two models we prefer by comparing the average standard error of a difference (s.e.d.) for the comparisons between adjusted genotype means - the lower the s.e.d. the better. \n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# blocks as fixed (linear model)\nmod.frc <- lm(yield ~ gen + rowF + colF,\n             data = dat)\n\nmod.frc %>%\n  emmeans(pairwise ~ \"gen\",\n          adjust = \"tukey\") %>%\n  pluck(\"contrasts\") %>% # extract diffs\n  as_tibble() %>% # format to table\n  pull(\"SE\") %>% # extract s.e.d. column\n  mean() # get arithmetic mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.329788\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# blocks as random (linear mixed model)\nmod.rrc <- lmer(yield ~ gen + (1 | rowF) + (1 | colF),\n               data = dat)\n\nmod.rrc %>%\n  emmeans(pairwise ~ \"gen\",\n          adjust = \"tukey\",\n          lmer.df = \"kenward-roger\") %>%\n  pluck(\"contrasts\") %>% # extract diffs\n  as_tibble() %>% # format to table\n  pull(\"SE\") %>% # extract s.e.d. column\n  mean() # get arithmetic mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.18948\n```\n:::\n:::\n\n\n:::\n:::\n\nAs a result, we find that the model with random row and column effects has the slightly smaller s.e.d. and is therefore more precise in terms of comparing genotypes.\n\n::: {.callout-warning collapse=\"true\"}\n## Model assumptions met? (click to show)\n\nIt would be at this moment (i.e. after fitting the model and before running the ANOVA), that you should check whether the model assumptions are met. Find out more in the [summary article \"Model Diagnostics\"](../../summaryarticles/modeldiagnostics.qmd)\n:::\n\n# ANOVA\n\nBased on our model, we can then conduct an ANOVA:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nANOVA <- anova(mod.rrc)\nANOVA\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nType III Analysis of Variance Table with Satterthwaite's method\n    Sum Sq Mean Sq NumDF DenDF F value Pr(>F)\ngen 32.157 0.94578    34    33  0.8969 0.6233\n```\n:::\n:::\n\n\n\nAccordingly, the ANOVA's F-test did not find the cultivar effects to be statistically significant (p = 0.623).\n\n# Mean comparison\n\nBesides an ANOVA, one may also want to compare adjusted yield means between cultivars via post hoc tests (t-test, Tukey test etc.).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_comp <- mod.rrc %>% \n  emmeans(specs = ~ gen) %>% # adj. mean per genotype\n  cld(adjust = \"Tukey\", Letters = letters) # compact letter display (CLD)\n\nmean_comp\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n gen emmean    SE   df lower.CL upper.CL .group\n G15   1.93 1.151 32.5   -2.072     5.93  a    \n G23   3.27 0.804 32.5    0.470     6.06  a    \n G22   3.54 0.794 32.5    0.784     6.31  a    \n G26   3.58 0.842 24.6    0.561     6.59  a    \n G04   3.62 0.796 32.5    0.857     6.39  a    \n G30   3.75 0.851 23.9    0.692     6.81  a    \n G35   3.75 0.800 32.5    0.975     6.54  a    \n G29   3.77 0.800 32.5    0.985     6.55  a    \n G24   3.85 0.853 23.9    0.779     6.91  a    \n G02   3.88 0.847 24.6    0.852     6.92  a    \n G28   3.95 0.811 32.5    1.132     6.77  a    \n G31   3.98 0.802 32.5    1.192     6.77  a    \n G10   4.07 0.804 32.5    1.275     6.87  a    \n G16   4.20 1.163 32.5    0.155     8.24  a    \n G17   4.22 0.794 32.5    1.459     6.98  a    \n G08   4.36 0.796 32.5    1.587     7.12  a    \n G13   4.36 0.804 32.5    1.560     7.15  a    \n G34   4.51 0.859 23.9    1.422     7.60  a    \n G12   4.58 0.802 32.5    1.797     7.37  a    \n G18   4.60 0.804 32.5    1.805     7.40  a    \n G32   4.62 0.847 24.6    1.582     7.65  a    \n G01   4.68 0.858 24.6    1.611     7.76  a    \n G05   4.71 0.798 32.5    1.939     7.49  a    \n G20   4.75 0.872 24.6    1.629     7.87  a    \n G21   4.76 0.858 24.6    1.686     7.83  a    \n G25   4.78 0.796 32.5    2.007     7.54  a    \n G03   4.78 0.804 32.5    1.985     7.58  a    \n G27   4.89 0.800 32.5    2.110     7.67  a    \n G14   4.92 0.804 32.5    2.125     7.72  a    \n G11   4.93 0.847 24.6    1.897     7.96  a    \n G09   4.94 0.849 23.9    1.889     7.99  a    \n G06   4.96 0.796 32.5    2.197     7.73  a    \n G33   5.13 0.796 32.5    2.362     7.90  a    \n G07   5.74 0.802 32.5    2.952     8.53  a    \n G19   6.07 0.796 32.5    3.302     8.84  a    \n\nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \nConf-level adjustment: sidak method for 35 estimates \nP value adjustment: tukey method for comparing a family of 35 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n```\n:::\n:::\n\n\n\nIt can be seen that while some genotypes have a higher yield than others, no differences are found to be statistically significant here. Thus, this is in agreement with the non-significant ANOVA results.\n\nNote that if you would like to see the underlying individual contrasts/differences between adjusted means, simply add `details = TRUE` to the `cld()` statement. Furthermore, check out the [Summary Article \"Compact Letter Display\"](../../summaryarticles/compactletterdisplay.qmd).\n\nFinally, we can create a plot that displays both the raw data and the results, *i.e.* the comparisons of the adjusted means that are based on the linear model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# reorder genotype factor levels according to adjusted mean\nmy_caption <- \"Black dots represent raw data. Red diamonds and error bars represent adjusted means with 95% confidence limits per cultivar. Means followed by a common letter are not significantly different according to the Tukey-test.\"\n\nggplot() +\n  # green/red dots representing the raw data\n  geom_point(\n    data = dat,\n    aes(y = yield, x = gen)\n  ) +\n  # red diamonds representing the adjusted means\n  geom_point(\n    data = mean_comp,\n    aes(y = emmean, x = gen),\n    shape = 18,\n    color = \"red\",\n    position = position_nudge(x = 0.2)\n  ) +\n  # red error bars representing the confidence limits of the adjusted means\n  geom_errorbar(\n    data = mean_comp,\n    aes(ymin = lower.CL, ymax = upper.CL, x = gen),\n    color = \"red\",\n    width = 0.1,\n    position = position_nudge(x = 0.2)\n  ) +\n  # red letters \n  geom_text(\n    data = mean_comp,\n    aes(y = upper.CL, x = gen, label = str_trim(.group)),\n    color = \"red\",\n    angle = 90,\n    hjust = -0.2,\n    position = position_nudge(x = 0.2)\n  ) + \n  scale_x_discrete(\n    name = \"Cultivar\",\n    limits = as.character(mean_comp$gen)\n  ) +\n  scale_y_continuous(\n    name = \"Yield\",\n    # limits = c(0, NA),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  coord_cartesian(ylim = c(0, NA)) +\n  labs(caption = my_caption) +\n  theme_classic() +\n  theme(plot.caption = element_textbox_simple(margin = margin(t = 5)),\n        plot.caption.position = \"plot\",\n        axis.text.x = element_text(angle = 90, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](rowcol_kemptonfox1997_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "rowcol_kemptonfox1997_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\r\n\\usepackage{longtable}\r\n\\usepackage{array}\r\n\\usepackage{multirow}\r\n\\usepackage{wrapfig}\r\n\\usepackage{float}\r\n\\usepackage{colortbl}\r\n\\usepackage{pdflscape}\r\n\\usepackage{tabu}\r\n\\usepackage{threeparttable}\r\n\\usepackage{threeparttablex}\r\n\\usepackage[normalem]{ulem}\r\n\\usepackage{makecell}\r\n\\usepackage{xcolor}\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}