{
  "hash": "b5e78cc49d860931a27311b36ba1c76b",
  "result": {
    "markdown": "---\ntitle: \"Designing Experiments\"\ncode-fold: true\n---\n\n\n\nThis article is very much under construction, but check out\n\n-   the old version of this chapter [here](https://schmidtpaul.github.io/DSFAIR/DesigningExperiments.html)\n\n-   the packages [{FielDHub}](https://didiermurillof.github.io/FielDHub/) and [{agricolae}](https://myaseen208.com/agricolae/)\n\n-   these publications:\n\n    -   @casler_2015\n\n    -   @piepho_2003\n\n    -   @piepho_2004\n\n    -   @piepho_2022\n    \n# Fundamental principles\n\nIn experimental design, three core principles are crucial: Replication, Randomization, and Blocking.\n\n * **Replication** (mandatory) involves repeating each treatment multiple times to distinguish real effects from random variations. For instance, in agricultural studies, a fertilizer treatment would be applied across several plots to accurately assess its impact.\n\n * **Randomization** (mandatory) ensures unbiased treatment assignment to experimental units, crucial for attributing outcome differences to the treatments rather than external factors. In clinical trials, this means randomly assigning patients to different treatment groups for comparability.\n\n * **Blocking** (optional) is used to control known sources of variability by grouping similar units. Treatments are randomized within these blocks, particularly effective in environments like field experiments where conditions like soil type can influence outcomes.\n\nThese principles - Replication for reliability, Randomization for unbiasedness, and Blocking for precision - are fundamental in designing robust experiments. A nice deep dive can be found in @casler_2015.\n\n# Possible Designs\n\nIn this section, we explore a variety of design models commonly employed in experimental life sciences, including fields such as agriculture, ecology, and biology. We will apply several functions provided by the [{FielDHub}](https://didiermurillof.github.io/FielDHub/) package, enabling us to generate and visualize exemplary layouts tailored to each design. It's noteworthy to mention that {FielDHub}, despite being a relatively new tool, offers, in my opinion, superior capabilities for creating experimental designs compared to the more established [{agricolae}](https://myaseen208.com/agricolae/) package. Note that instead of real treatment levels, we will generate examplary levels like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(FielDHub)\n\npaste0(\"T\", 1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"T1\" \"T2\" \"T3\"\n```\n:::\n:::\n\n\n\n## CRD\n\nIn a Completely Randomized Design (CRD), each experimental unit is assigned to a treatment completely at random, without any restrictions or grouping. This design is particularly useful when the experimental units are homogeneous or when the influence of external variables is minimal. In the context of genotypes, for example, each genotype (treatment level) is randomly allocated to the experimental units, such as plots or pots, ensuring that each treatment has an equal chance of being applied to any unit. Unlike designs with blocks or groups, the CRD does not account for potential variations among blocks or locations, making it a straightforward but powerful tool for experiments where external variability is low. This design's simplicity makes it ideal for preliminary studies or scenarios where the primary goal is to assess the direct effects of treatments under controlled conditions.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCRD(\n  t = paste0(\"T\", 1:3),\n  reps = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCRD(\n  t = paste0(\"T\", 1:4),\n  reps = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n## RCBD\n\nIn a Randomized Complete Block Design (RCBD), treatments are randomly assigned within blocks, where each block is a grouping of experimental units that are similar in some way that is important to the experiment. This design is particularly effective in experiments where variability among the experimental units is expected, but can be grouped into relatively homogeneous blocks.\n\nFor instance, in agricultural experiments involving different genotypes, each block might represent a particular area of land with similar soil conditions. The key feature of an RCBD is that every treatment appears once in each block. This structure allows for the control of variation within blocks, making it easier to detect differences between treatments.\n\nThe RCBD is advantageous when external factors, such as environmental conditions or spatial effects, might influence the outcome. By comparing treatments within the same block, the RCBD controls for these external variations, providing a more accurate assessment of the treatment effects. This design is widely used in field experiments and other situations where controlling for external variability is crucial for obtaining reliable results.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRCBD(\n  t = paste0(\"T\", 1:3),\n  reps = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRCBD(\n  t = paste0(\"T\", 1:4),\n  reps = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n## Latin Square\n\nIn a Latin Square Design, the experiment is arranged in a square grid to control for two types of variability, such as different soil types (rows) and sunlight exposure (columns). Each treatment, like a specific genotype in an agricultural study, is assigned once in each row and column. This design efficiently manages two confounding variables with limited experimental units, ensuring that each treatment is evenly distributed across the varying conditions.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatin_square(\n  t = 3,\n  reps = 1,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatin_square(\n  t = 4,\n  reps = 1,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n## Augmented\n\nIn a non-resolvable[^1] Augmented Design, the treatment levels are categorized into two distinct groups. Within the realm of genotypes, these are identified as \"lines\" and \"checks\". The lines represent the genotypes of interest, the primary focus of our study. On the other hand, checks are well-established genotypes that act as a standard reference, providing a reliable benchmark for comparing the performance of the lines. It's important to note that the blocks are complete only in terms of the checks, meaning every check is present in each block. Conversely, the lines are introduced uniquely, appearing just once throughout the entire experiment. Through direct comparisons with the checks and indirect comparisons among the lines, valuable insights can be gleaned, making this design a practical choice in resource-limited situations.\n\n[^1]: The design is non-resolvable, since we cannot group incomplete blocks to form complete replicates.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRCBD_augmented(\n  lines = 6,\n  checks = 2,\n  b = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRCBD_augmented(\n  lines = 30,\n  checks = 3,\n  b = 6,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n## Alpha\n\nAn $\\alpha$-design is an incomplete block design that is resolvable, meaning it is possible to group incomplete blocks into complete replicates. Thus, each treatment appears exactly once per replicate but obviously only in one of the incomplete blocks within each replicate, respectively. However, the assignment of treatments to the incomplete blocks is not random as it would be e.g. when simply taking an RCBD and separating the complete blocks further into incomplete blocks. Instead, the assignment is optimized so that any two treatments occur in the same incomplete-block in nearly equal frequency. In other words: The goal is to give any pair of treatments the same chance of appearing together in the same incomplete block to allow for a direct comparison. This design is defined by the formula $v = sk$, where $v$ is the number of treatments, $s$ the number of blocks per replicate, and $k$ the size of the incomplete blocks.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha_lattice(\n  t = 9, \n  k = 3, \n  r = 3, \n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha_lattice(\n  t = 15, \n  k = 3, \n  r = 3, \n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n## Row-Column\n\nIn a resolvable row-column design a complete replicate is divided into rows and columns. This creates a grid of incomplete blocks in both dimensions. The design's resolvability lies in its ability to group these incomplete rows and columns back into complete replicates.\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_column(\n  t = 6,\n  nrows = 2,\n  r = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_column(\n  t = 12,\n  nrows = 3,\n  r = 3,\n  seed = 42\n) %>% plot()\n```\n\n::: {.cell-output-display}\n![](designingexperiments_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n:::\n\n# Sample Size\n\nTODO\n",
    "supporting": [
      "designingexperiments_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}